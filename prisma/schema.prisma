generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Channel {
  id          String  @id @default(cuid())
  description String?

  createdById String
  createdBy   Account @relation(fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages        Message[]
  channelAccounts ChannelAccount[]
}

enum MessageType {
  SYSTEM
  USER
  ADMIN
}

model Message {
  id        String @id @default(cuid())
  channelId String
  accountId String?
  content   String
  type      MessageType @default(SYSTEM)

  createdAt DateTime @unique @default(now())
  updatedAt DateTime @unique @updatedAt

  channel Channel @relation(fields: [channelId], references: [id])
  account Account? @relation(fields: [accountId], references: [id])
}

model Account {
  id String @id

  defaultCharacterId String?
  defaultCharacter   Character? @relation("DefaultCharacter", fields: [defaultCharacterId], references: [id])

  channelAccounts    ChannelAccount[]
  messages           Message[]
  createdChannels    Channel[]
  createdCharacters  Character[]         @relation("Created")
  preparedCharacters PreparedCharacter[]
}

model ChannelAccount {
  channelId String
  accountId String

  identifier  Int
  characterId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  character Character @relation(fields: [characterId], references: [id])
  channel   Channel   @relation(fields: [channelId], references: [id])
  account   Account   @relation(fields: [accountId], references: [id])

  @@unique([channelId, identifier])
  @@unique([channelId, accountId])
  @@index([channelId, identifier])
  @@index([channelId, accountId])
}

model Fandom {
  id     String  @id @default(cuid())
  name   String
  icon   String?
  colour String

  characters Character[]

  @@index([name])
}

model Character {
  id String @id @default(cuid())

  name   String
  colour String
  icon   String?

  fandomId     String
  forkedFromId String?
  createdById  String
  system       Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  forkedFrom Character?  @relation("forks", fields: [forkedFromId], references: [id])
  forks      Character[] @relation("forks")

  fandom Fandom @relation(fields: [fandomId], references: [id])

  createdBy Account @relation("Created", fields: [createdById], references: [id])

  usedBy Account[] @relation("DefaultCharacter")

  channelAccounts   ChannelAccount[]
  references        CharacterReference[]
  preparedCharacters PreparedCharacter[]

  @@index([name])
}

model CharacterReference {
  id String @id @default(cuid())

  nsfw     Boolean  @default(false)
  extreme  Boolean  @default(false)
  warnings String[]

  characterId String
  references  String[]

  character Character @relation(fields: [characterId], references: [id])
}

model PreparedCharacter {
  characterId String
  accountId   String

  command   String

  account   Account   @relation(fields: [accountId], references: [id])
  character Character @relation(fields: [characterId], references: [id])

  @@unique([accountId, characterId])
  @@index([accountId, characterId])
}
